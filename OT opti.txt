import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

public class Main {

    public static class TripStats {
        long numTrips = 0;
        double totalFare = 0.0;
        double totalTip = 0.0;

        public void addTrip(double fare, double tip) {
            numTrips++;
            totalFare += fare;
            totalTip += tip;
        }

        public double getAvgFare() {
            return numTrips > 0 ? totalFare / numTrips : 0.0;
        }
    }

    public static class VendorStats {
        long numTrips = 0;
        double totalPassengers = 0.0;

        public void addTrip(int passengerCount) {
            numTrips++;
            totalPassengers += passengerCount;
        }

        public double getAvgPassengers() {
            return numTrips > 0 ? totalPassengers / numTrips : 0.0;
        }
    }

    public static class DailyStats {
        long totalTrips = 0;
        double totalPassengers = 0.0;
        double totalDistance = 0.0;
        double totalFare = 0.0;
        double totalTip = 0.0;

        public void addTrip(int passengerCount, double distance, double fare, double tip) {
            totalTrips++;
            totalPassengers += passengerCount;
            totalDistance += distance;
            totalFare += fare;
            totalTip += tip;
        }

        public double getAvgPassengers() {
            return totalTrips > 0 ? totalPassengers / totalTrips : 0.0;
        }

        public double getAvgDistance() {
            return totalTrips > 0 ? totalDistance / totalTrips : 0.0;
        }

        public double getAvgFare() {
            return totalTrips > 0 ? totalFare / totalTrips : 0.0;
        }
    }

    // Unified data structure to hold parsed fields
    private static class TripData {
        Integer paymentType;
        Double tripDistance;
        Double fareAmount;
        Double tipAmount;
        Integer vendorId;
        Integer passengerCount;
        Character storeAndFwdFlag;
        LocalDateTime pickupDateTime;

        TripData(String line) {
            String[] keyValuePairs = line.substring(1, line.length() - 1).split(",");
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

            for (String pair : keyValuePairs) {
                String[] entry = pair.split(":", 2);
                if (entry.length == 2) {
                    String key = entry[0].trim().replace("\"", "");
                    String value = entry[1].trim().replace("\"", "");

                    if ("null".equals(value)) continue;

                    try {
                        switch (key) {
                            case "trip_distance":
                                tripDistance = Double.parseDouble(value);
                                break;
                            case "payment_type":
                                paymentType = Integer.parseInt(value);
                                break;
                            case "fare_amount":
                                fareAmount = Double.parseDouble(value);
                                break;
                            case "tip_amount":
                                tipAmount = Double.parseDouble(value);
                                break;
                            case "VendorID":
                                vendorId = Integer.parseInt(value);
                                break;
                            case "passenger_count":
                                passengerCount = Integer.parseInt(value);
                                break;
                            case "store_and_fwd_flag":
                                storeAndFwdFlag = value.charAt(0);
                                break;
                            case "tpep_pickup_datetime":
                                pickupDateTime = LocalDateTime.parse(value, formatter);
                                break;
                        }
                    } catch (NumberFormatException | java.time.format.DateTimeParseException e) {
                        continue;
                    }
                }
            }
        }
    }

    // Process all queries in a single pass
    public static void processFile(String filename) {
        long totalTrips = 0;
        Map<Integer, TripStats> paymentStats = new HashMap<>();
        Map<Integer, VendorStats> vendorStats = new HashMap<>();
        Map<LocalDate, DailyStats> dailyStats = new TreeMap<>();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime janStart = LocalDateTime.parse("2024-01-01 00:00:00", formatter);
        LocalDateTime janEnd = LocalDateTime.parse("2024-02-01 00:00:00", formatter);

        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            long count = 0;

            while ((line = reader.readLine()) != null) {
                totalTrips++;
                count++;
                if (count % 1_000_000 == 0) System.out.println(count + " lines processed...");

                TripData data = new TripData(line);

                // Query 2: Payment stats for trips > 5 miles
                if (data.tripDistance != null && data.tripDistance > 5 &&
                        data.paymentType != null && data.fareAmount != null && data.tipAmount != null) {
                    paymentStats.computeIfAbsent(data.paymentType, k -> new TripStats())
                            .addTrip(data.fareAmount, data.tipAmount);
                }

                // Query 3: Vendor stats for store_and_fwd_flag = 'Y' in January 2024
                if (data.storeAndFwdFlag != null && data.storeAndFwdFlag == 'Y' &&
                        data.pickupDateTime != null && data.vendorId != null && data.passengerCount != null &&
                        !data.pickupDateTime.isBefore(janStart) && data.pickupDateTime.isBefore(janEnd)) {
                    vendorStats.computeIfAbsent(data.vendorId, k -> new VendorStats())
                            .addTrip(data.passengerCount);
                }

                // Query 4: Daily stats for January 2024
                if (data.pickupDateTime != null && data.passengerCount != null && data.tripDistance != null &&
                        data.fareAmount != null && data.tipAmount != null &&
                        !data.pickupDateTime.isBefore(janStart) && data.pickupDateTime.isBefore(janEnd)) {
                    LocalDate tripDate = data.pickupDateTime.toLocalDate();
                    dailyStats.computeIfAbsent(tripDate, k -> new DailyStats())
                            .addTrip(data.passengerCount, data.tripDistance, data.fareAmount, data.tipAmount);
                }
            }

            // Output results for Query 1
            System.out.println("┌─────────────────┐");
            System.out.println("│ total_trips    │");
            System.out.println("│ int64          │");
            System.out.println("├─────────────────┤");
            System.out.printf("│ %-14d │%n", totalTrips);
            System.out.printf("│ (%.2f million) │%n", (double) totalTrips / 1e6);
            System.out.println("└─────────────────┘");

            // Output results for Query 2
            System.out.println("\nAnalyzing trips by payment type (distance > 5 miles):");
            System.out.println("┌──────────────┬───────────┬────────────────────┬────────────────────┐");
            System.out.println("│ payment_type │ num_trips │ avg_fare          │ total_tip         │");
            System.out.println("│ int64        │ int64     │ double            │ double            │");
            System.out.println("├──────────────┼───────────┼────────────────────┼────────────────────┤");
            for (Map.Entry<Integer, TripStats> entry : paymentStats.entrySet()) {
                int paymentType = entry.getKey();
                TripStats stats = entry.getValue();
                System.out.printf("│ %-12d │ %-9d │ %-18.2f │ %-18.2f │%n",
                        paymentType, stats.numTrips, stats.getAvgFare(), stats.totalTip);
            }
            System.out.println("└──────────────┴───────────┴────────────────────┴────────────────────┘");

            // Output results for Query 3
            System.out.println("\nAnalyzing trips by vendor (store_and_fwd_flag = 'Y', Jan 2024):");
            System.out.println("┌──────────┬───────┬───────────────────┐");
            System.out.println("│ VendorID │ trips │ avg_passengers   │");
            System.out.println("│ int64    │ int64 │ double           │");
            System.out.println("├──────────┼───────┼───────────────────┤");
            for (Map.Entry<Integer, VendorStats> entry : vendorStats.entrySet()) {
                int vendorId = entry.getKey();
                VendorStats stats = entry.getValue();
                System.out.printf("│ %-8d │ %-5d │ %-17.2f │%n",
                        vendorId, stats.numTrips, stats.getAvgPassengers());
            }
            System.out.println("└──────────┴───────┴───────────────────┘");

            // Output results for Query 4
            System.out.println("\nAnalyzing trips by day (Jan 2024):");
            System.out.println("┌────────────┬─────────────┬───┬────────────────────┬────────────────────┐");
            System.out.println("│ trip_date  │ total_trips │ … │ avg_fare          │ total_tip         │");
            System.out.println("│ date       │ int64       │   │ double            │ double            │");
            System.out.println("├────────────┼─────────────┼───┼────────────────────┼────────────────────┤");
            for (Map.Entry<LocalDate, DailyStats> entry : dailyStats.entrySet()) {
                LocalDate date = entry.getKey();
                DailyStats stats = entry.getValue();
                System.out.printf("│ %-10s │ %-11d │ … │ %-18.15f │ %-18.13f │%n",
                        date, stats.totalTrips, stats.getAvgFare(), stats.totalTip);
            }
            System.out.println("├────────────┴─────────────┴───┴────────────────────┴────────────────────┤");
            System.out.println("│ 31 rows 6 columns (4 shown)                                              │");

            System.out.println("Finished processing " + count + " lines.");

        } catch (IOException e) {
            System.err.println("Error opening file: " + filename);
        }
    }

    public static void main(String[] args) {
        String filename = "C:\\Users\\HEMANG MALIK\\Downloads\\taxi-trips-data.json\\taxi-trips-data.json";
        processFile(filename);
    }
}